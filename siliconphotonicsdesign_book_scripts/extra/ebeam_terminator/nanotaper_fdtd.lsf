# FDTD Solutions script
# Draw the silicon nano-taper, setup 3D FDTD simulations
# This can also be used to simulate the disconnected waveguide.

#TYPE = "Disconnected";  # used for ebeam_disconnected_te1550
TYPE = "Terminator";   # used for ebeam_terminator_te1550

# inputs example:
#wg_w1=500e-9; wg_w2=180e-9; wg_t=220e-9; wg_l=10e-6;
if (TYPE == "Terminator") {
	wg_w1=500e-9; wg_w2=60e-9; wg_t=220e-9; wg_l=10e-6;    # EBeam terminator
}
if (TYPE == "Disconnected") {
	wg_w1=500e-9; wg_w2=500e-9; wg_t=220e-9; wg_l=0.1e-6;  # disconnected waveguide
}
BC='Metal';  # Metal is faster than PML, error introduced is < 0.02 dB in coupling.
Mode_sel = "TM";
Mode_Selection = 'fundamental '+Mode_sel+' mode';
Wavelength=1.55e-6;
WL_SPAN = 100e-9;
FREQ_PTS = 101;
PLOT_FIELD=0;
MESH=1;

newproject;  redrawoff;

addpyramid; set('name','Si taper');
set('x span bottom',wg_t); set('x span top',wg_t);
set('y span bottom',wg_w1); set('y span top',wg_w2);
set('z span',wg_l);
set('first axis','y'); set('rotation 1',90);
set('x',-wg_l/2); set('z',wg_t/2); set('y',0);
set('material','Si (Silicon) - Palik');

addrect; set('name','Input');
set('x min',-wg_l-1e-6); set('x max',-wg_l);
set('z',wg_t/2); set('z span',wg_t);
set('y span', wg_w1);
set('material','Si (Silicon) - Palik');


if (TYPE == "Disconnected") {
	# Add a perpendicular waveguide at the end of the nanotaper, to see how much reflection is causes; worst case.
	addrect; set('name','Perpendicular_WG');
	set('x min',1e-6); set('x max',1.5e-6);
	set('z',wg_t/2); set('z span',wg_t);
	set('y span', 10e-6);
	set('material','Si (Silicon) - Palik');
}

addrect; set('name','Oxide');
set('x min',-wg_l-1e-6); set('x max',1.2e-6);
set('z min',-2e-6); set('z max',2.1e-6);
set('y span', 10e-6);
set('material','SiO2 (Glass) - Palik');
set('override mesh order from material database',1);
set('mesh order',3);  set('alpha',0.2);

addrect; set('name','SiSubstrate');
set('x min',-wg_l-1e-6); set('x max',1.2e-6);
set('z min',-3e-6); set('z max',-2e-6);
set('y span', 10e-6);
set('material','Si (Silicon) - Palik');
set('override mesh order from material database',1);
set('mesh order',3);  set('alpha',0.2);

addfdtd; #  create simulate mesh
set('x min',-wg_l-0.5e-6); set('x max',1.1e-6);
set('z span',6e-6); set('y span', 6e-6);
set('simulation time', 200e-15+wg_l/c*4.5);
set('mesh type','auto non-uniform'); set('mesh accuracy',MESH);
set('x min bc', 'PML'); set('x max bc', 'PML');
#set('y min bc', 'Anti-Symmetric'); set('y max bc', BC); # problem with field import into MODE
set('y min bc', BC); set('y max bc', BC);
set('z min bc', BC); set('z max bc', BC);


if(1) {
	addmesh;  # mesh override, higher resolution in the waveguide.
	set('y span',wg_w1); set('x span',0); set('z span', wg_t*2); set('z',wg_t/2);
	set('set equivalent index', 1);
	set('override y mesh',1); set('equivalent y index',5);
	set('override z mesh',1); set('equivalent z index',5);
}

addmode;
set('injection axis','x-axis'); set('set wavelength',1);
set('center wavelength', Wavelength); set('wavelength span', 200e-9);
set('x', -wg_l-0.2e-6); set('y',0); set('y span', 2e-6);
set('z', wg_t/2); set('z span', 2e-6);
set('mode selection', Mode_Selection);
updatesourcemode;

#Set global source parameters. 
FREQ_CENTRE = c/Wavelength;
FREQ_SPAN = c/(Wavelength-WL_SPAN/2) - c/(Wavelength+WL_SPAN/2);
setglobalsource("set frequency",1);
setglobalsource("center wavelength", 1.55e-6);  
setglobalsource("center frequency",FREQ_CENTRE);
setglobalsource("frequency span",FREQ_SPAN);
setglobalmonitor("frequency points",FREQ_PTS);


addpower; set('name','Port1');
set('monitor type', '2D X-normal');
set('x',-wg_l); 
set('z min',-2e-6); set('z max',2.1e-6);
set('y span', 6e-6);


addmodeexpansion;
set('name', 'expansion_port1');
set('monitor type', '2D X-normal');
set('x',-wg_l); 
set('z min',-2e-6); set('z max',2.1e-6);
set('y span', 6e-6);
set('frequency points',1);
set('mode selection', Mode_Selection);
setexpansion('Port1expa','Port1');


if (PLOT_FIELD) {
	addpower; set('name','XY');
	set('override global monitor settings',1);
	set('use source limits',0); set('frequency points',1);
	set('wavelength center', Wavelength);
	set('monitor type', '2D Z-normal');
	set('x min',-wg_l+0.5e-6); set('x max',2e-6);
	set('y span', 6e-6); set('z',wg_t/2);

	addpower; set('name','XZ');
	set('override global monitor settings',1);
	set('use source limits',0); set('frequency points',1);
	set('wavelength center', Wavelength);
	set('monitor type', '2D Y-normal');
	set('x min',-wg_l+0.5e-6); set('x max',2e-6);
	set('z span', 6e-6);
	
	addpower; set('name','reflected');   # about 5% reflection observed from the nano-tip & oxide.
	set('monitor type', '2D X-normal');
	set('x', -wg_l+0.8e-6); set('z span',6e-6); set('y span', 6e-6);
	set('override global monitor settings',1);
	set('use source limits',0); set('frequency points',1);
	set('wavelength center', Wavelength);
}

addpower; set('name','output');
set('monitor type', '2D X-normal');
set('x', 1.05e-6); set('z span',6e-6); set('y span', 6e-6);
# Necessary to export only one wavelength point; difficult in multi-wavelength overlap integrals
set('override global monitor settings',1);
set('use source limits',0); set('frequency points',1);
set('wavelength center', Wavelength);


select("FDTD"); setview("extent");  # zoom to extent

save('nanotaper');


run;


if (PLOT_FIELD) {
	Exy=sqrt(abs(getdata('XY','Ex'))^2 + abs(getdata('XY','Ey'))^2 + abs(getdata('XY','Ez'))^2);  
	x=getdata('XY','x'); y=getdata('XY','y');
	image(x,y,Exy/max(Exy));  # plot |E|

	Exz=sqrt(abs(getdata('XZ','Ex'))^2 + abs(getdata('XZ','Ey'))^2 + abs(getdata('XZ','Ez'))^2);  
	z=getdata('XZ','z');
	image(x,z,Exz/max(Exz));  # plot |E|
	
	Eo=sqrt(abs(getdata('output','Ex'))^2 + abs(getdata('output','Ey'))^2 + abs(getdata('output','Ez'))^2);  
	y=getdata('output','y'); z=getdata('output','z');
	image(y,z,Eo/max(Eo));  # plot |E|

	Eff = farfield3d("output",1);
	ux = farfieldux("output",1); uy = farfielduy("output",1);
	image(ux,uy,Eff,"","","Far field of output","polar");
	
	plot(ux*90, Eff(75,1:150)/max(Eff(75,1:150)), Eff(1:150,75)/max(Eff(1:150,75)),"Angle","Far field intensity");
	legend ('Vertical far-field','Horizontal far-field');
}

savedcard("nanotaper","::model::output");
#matlabsave ("nanotaper_output");

Port1=getresult("expansion_port1","expansion for Port1expa");
S11=Port1.b/Port1.a;
f=Port1.f;

plot (c/f*1e6, 10*log10(abs(S11)^2),  'Wavelength (um)', 'Transmission (dB)', 'Input Port1');
legend ('S11 (backreflection)');




############################################################
#Export data
###########################################################

#export .xml and .sparam (individual file for s-params)
n_ports = 4;
mode_label = "TE";
mode_ID = "1";
input_type = "transmission";
filename = "nanotaper_w1=" + num2str(wg_w1*1e9) + ",w2=" + num2str(wg_w2*1e9) + ",L=" +num2str(wg_l*1e6) + "_" + Mode_sel;

if(fileexists(filename)) {rm(filename);} # old files with same name get deleted. 
system('mkdir -p sparam_files'); file1="sparam_files/" + filename+".sparam";
if (fileexists(file1)) { rm(file1);} # delete Sparam file if it already exists

# Sx1 Input on port 1
S11_data=[f,abs(S11),unwrap(angle(S11))];
write(file1,"('port 1','TE',1,'port 1',1,'transmission')"
       +endl+"("
       +num2str(length(f))
       +",3)"
       +endl+num2str(S11_data)
       );

